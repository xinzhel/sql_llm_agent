{"name": "generate_SQL_templates_for_one_table", "description": "Generate SQL Templates with placeholders given table name and schema.\n\n## Input\n    table <str>: the table name\n\n    columns <List[Dict[str, str]]>: the column information of the table\n\n    sql_templates <List[str]>: Below are the requirement of the ACCEPTABLE SQL templates. \n        * ONLY \"SELECT\" queries\n        * The templates include one or more parameter placeholder(s) within the WHERE clause. \n        * The parameter placeholder(s) should be a combination of a table name and a column name, enclosed within square brackets, e.g., \"[User.Name]\".\n        * The Selected Column and Condition Column(s) should be meaningful to humans, i.e., avoiding using columns as primary keys like \"id\".\n        * Need specific Selected Column(s) rather than \"*\"\n        * Once the SQL templates are translated into natural language, they can be understood by non-tech users and not semantically duplicated.\n\n        \n    placeholders <List[List[str]]>: the parameter placeholder(s) in each sql template, e.g., placeholders[0][0]==\"[User.Name]\" if the above example is the first sql query template.", "parameters": {"type": "object", "properties": {"table": {"description": "The table name.", "type": "string"}, "columns": {"description": "The columns of the table.", "items": {"additionalProperties": {"type": "string"}, "type": "object"}, "type": "array"}, "sql_templates": {"description": "SQL templates.", "items": {"type": "string"}, "type": "array"}, "placeholders": {"description": "lists of placeholders.", "items": {"items": {"type": "string"}, "type": "array"}, "type": "array"}}, "required": ["columns", "placeholders", "sql_templates", "table"]}}